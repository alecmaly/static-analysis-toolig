/**
 * @name Empty block
 * @kind problem
 * @problem.severity warning
 * @id go/example/empty-block
 */



// run 
// codeql query run --database=~/Desktop/code4rena/vscode-codeql-starter/geth-codeql-database --output=file.bqrs ~/Desktop/code4rena/vscode-codeql-starter/codeql-custom-queries-go/all-paths.ql



import go
import semmle.go.dataflow.internal.DataFlow

string getQualifiedNameOrEmptyFunc(Function f) {
    exists(f.getQualifiedName()) and result = f.getQualifiedName()
    or 
    not exists(f.getQualifiedName()) and result = ""
}

string getQualifiedNameOrEmptyVar(Variable f) {
    exists(f.getQualifiedName()) and result = f.getQualifiedName()
    or 
    not exists(f.getQualifiedName()) and result = ""
}

string getLocationOrEmpty(Function f) {
    exists(f.getBody().getLocation()) and result = f.getBody().getLocation().toString()
    or 
    not exists(f.getBody().getLocation()) and result = ""
}

string getWriteLoc(Write w) {
    result = w.getFile() + "#" + w.getRhs().getStartLine().toString()
}
string getReadLoc(Read r) {
    result = r.getFile() + "#" + r.getStartLine().toString()
}

/* ALL CODE PATHS */
// Notes: 
// - .getBody() removes a lot of nodes, can we do this without it? (how do we get location?)
from Function f, CallNode n
where f.getACall() = n 
// select f, f.getBody().getLocation(), n, n.getFile(), n.getStartLine(), n.getStartColumn(), n.getEnclosingCallable(), n.getEnclosingCallable().getFuncDef().getLocation()
select f, getQualifiedNameOrEmptyFunc(f), getLocationOrEmpty(f), n, n.getFile(), n.getStartLine(), n.getStartColumn(), n.getEnclosingCallable(), n.getEnclosingCallable().getFuncDef().getLocation()





/* Vars Read/Write */
// Notes:
// - Can look up function name from previous query given getRoot() location
// from Variable v, Write wn, Read rn
// where v.getAWrite() = wn and v.getARead() = rn and wn.getRoot().getLocation() != rn.getRoot().getLocation()
// // select v, v.getScope(), getQualifiedNameOrEmptyVar(v), wn.getRoot().getLocation(), getWriteLoc(wn), rn, rn.getRoot().getLocation(), getReadLoc(rn)
// select v, getQualifiedNameOrEmptyVar(v), wn.getRoot().getLocation(), getWriteLoc(wn), rn, rn.getRoot().getLocation(), getReadLoc(rn)









/* ALL TAINED CODE PATHS */
// from Function f, Name e
// where f.getAReference() = e 
// select f, getQualifiedNameOrEmpty(f), getLocationOrEmpty(f), e.getEnclosingFunction().getName(), e.getEnclosingFunction().getLocation() // f.getBody().getLocation()





/* Experimenting */
// class MyDataFlowConfiguration extends DataFlow::Configuration {
//     MyDataFlowConfiguration() { this = "MyDataFlowConfiguration" }
  
//     override predicate isSource(DataFlow::Node source) {
//         source instanceof Node
//     }
  
//     override predicate isSink(DataFlow::Node sink) {
//         sink instanceof Node
//     }
// }


// from DataFlow::Node src, DataFlow::Node sink, MyDataFlowConfiguration config
// where config.hasFlow(src, sink) and src != sink
// select src.getRoot(), src, "This string constructs a URL $@.", sink, sink.getRoot(), "here"